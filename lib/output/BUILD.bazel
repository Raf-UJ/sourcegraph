load("//dev:go_defs.bzl", "go_test")
load("@io_bazel_rules_go//go:def.bzl", "go_library")

go_library(
    name = "output",
    srcs = [
        "block.go",
        "capabilities.go",
        "emoji.go",
        "line.go",
        "logger.go",
        "noop_writer.go",
        "output.go",
        "output_unix.go",
        "output_windows.go",
        "pending.go",
        "pending_simple.go",
        "pending_tty.go",
        "progress.go",
        "progress_simple.go",
        "progress_tty.go",
        "progress_with_status_bars.go",
        "progress_with_status_bars_simple.go",
        "progress_with_status_bars_tty.go",
        "spinner.go",
        "status_bar.go",
        "style.go",
        "visible_string_width.go",
    ],
    importpath = "github.com/sourcegraph/sourcegraph/lib/output",
    visibility = ["//visibility:public"],
    deps = [
        "//vendor/github.com/charmbracelet/glamour",
        "//vendor/github.com/charmbracelet/glamour/ansi",
        "//vendor/github.com/grafana/regexp",
        "//vendor/github.com/mattn/go-isatty",
        "//vendor/github.com/mattn/go-runewidth",
        "//vendor/github.com/moby/term",
        "//vendor/github.com/muesli/termenv",
        "//vendor/github.com/sourcegraph/log",
        "//vendor/github.com/sourcegraph/sourcegraph/lib/errors",
        "//vendor/golang.org/x/term",
    ] + select({
        "@io_bazel_rules_go//go/platform:windows": [
            "//vendor/golang.org/x/sys/windows",
        ],
        "//conditions:default": [],
    }),
)

go_test(
    name = "output_test",
    timeout = "short",
    srcs = ["output_unix_test.go"],
    embed = [":output"],
    deps = select({
        "@io_bazel_rules_go//go/platform:aix": [
            "//vendor/github.com/google/go-cmp/cmp",
        ],
        "@io_bazel_rules_go//go/platform:android": [
            "//vendor/github.com/google/go-cmp/cmp",
        ],
        "@io_bazel_rules_go//go/platform:darwin": [
            "//vendor/github.com/google/go-cmp/cmp",
        ],
        "@io_bazel_rules_go//go/platform:dragonfly": [
            "//vendor/github.com/google/go-cmp/cmp",
        ],
        "@io_bazel_rules_go//go/platform:freebsd": [
            "//vendor/github.com/google/go-cmp/cmp",
        ],
        "@io_bazel_rules_go//go/platform:ios": [
            "//vendor/github.com/google/go-cmp/cmp",
        ],
        "@io_bazel_rules_go//go/platform:linux": [
            "//vendor/github.com/google/go-cmp/cmp",
        ],
        "@io_bazel_rules_go//go/platform:netbsd": [
            "//vendor/github.com/google/go-cmp/cmp",
        ],
        "@io_bazel_rules_go//go/platform:openbsd": [
            "//vendor/github.com/google/go-cmp/cmp",
        ],
        "@io_bazel_rules_go//go/platform:solaris": [
            "//vendor/github.com/google/go-cmp/cmp",
        ],
        "//conditions:default": [],
    }),
)
