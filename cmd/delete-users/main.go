package main

import (
	"bytes"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strconv"
	"time"
)

// GraphQL request structure
type graphqlRequest struct {
	Query     string `json:"query"`
	Variables map[string]interface{} `json:"variables"`
}

func main() {
	// User IDs to delete
	userIds := []int{180740, 176100, 167625, 197031, 197826, 164141, 100736, 130633, 153522, 174571, 143259, 147480, 198874, 239332, 252683, 181278, 137006, 181239, 197290, 197891, 182792, 183762, 204338, 247306, 251186, 176190, 144775, 201089, 190021, 78730, 189771, 253945, 181190, 197140, 245115, 197171, 194140, 158696, 149197, 246484, 149859, 166681, 157008, 94445, 158990, 198116, 251281, 122917, 88725, 198875, 143515, 148342, 130388, 164843, 175080, 197698, 192954, 189554, 236604, 168331, 189519, 160885, 134311, 143348, 141614, 105470, 140225, 250768, 254563, 160945, 174309, 147737, 108528, 174291, 148103, 157427, 171363, 169673, 139205, 174433, 161968, 49913, 251301, 97976, 143844, 149311, 218543, 243167, 155274, 65123, 197240, 177778, 207264, 254565, 195141, 129599, 201199, 82122, 195723, 146789, 49647, 195802, 154823, 151892, 190337, 156634, 177285, 65539, 161503, 130883, 144563, 158524, 159907, 65199, 163142, 70510, 162153, 167268, 160042, 199420, 159374, 199122, 161361, 177056, 154191, 188622, 185675, 167084, 161456, 202471, 39860, 183939, 70685, 230411, 190102, 149217, 64155, 134717, 153484, 160633, 135095, 176845, 152200, 251839, 181266, 171767, 182395, 168882, 126312, 69575, 197252, 104038, 199104, 133699, 158804, 198326, 215810, 52453, 201347, 155290, 189035, 198995, 176584, 164944, 175402, 154246, 152384, 139888, 149247, 177501, 161771, 197450, 252936, 196596, 154339, 202299, 141691, 237091, 129492, 157049, 163614, 168413, 97548, 204399, 129437, 149081, 189710, 204562, 177138, 115118, 143371, 244154, 198045, 205398, 207236, 140134, 246444, 250974, 203181, 142297, 177317, 246511, 201589, 148864, 244280, 176322, 139873, 149138, 148019, 195082, 196919, 175128, 196738, 164233, 49804, 205898, 133983, 207103, 147638, 188967, 164440, 142673, 195783, 195883, 133703, 70475, 227254, 149238, 75274, 155627, 135487, 140231, 121837, 198286, 138530, 202518, 201218, 250108, 238970, 153353, 190838, 203260, 198010, 148637, 164478, 159261, 251154, 251872, 163709, 154370, 202293, 160041, 230440, 164338, 154862, 75139, 134191, 185680, 146827, 81709, 170203, 54808, 181242, 154113, 151901, 169923, 197136, 253751, 136634, 230593, 158987, 138003, 202509, 129670, 168746, 158003, 175372, 174667, 181334, 168474, 102803, 181189, 57777, 158194, 127925, 201922, 136486, 156673, 198181, 133628, 154055, 153833, 175876, 141369, 106198, 134129, 161951, 81973, 154786, 216095, 158014, 183515, 197092, 166769, 137903, 197072, 112138, 197162, 103610, 254513, 148682, 147329, 138176, 179894, 144195, 136784, 151561, 157944, 197208, 208493, 75114, 150045, 88593, 193905, 245390, 232886, 141800, 151988, 165256, 176187, 246590, 126868, 108470, 175103, 251227, 177786, 199070, 159115, 181423, 168959, 205960, 65100, 154187, 166976, 197183, 153894, 136913, 202156, 152038, 184176, 128191, 136967, 130052, 200991, 237526, 218931, 137619, 155349, 198883, 191567, 197353, 153576, 157438, 246963, 150426, 162154, 154192, 219944, 142165, 197314, 137349, 251555, 142232, 245751, 129720, 195035, 251242, 65662, 94317, 197130, 152874, 188209, 142629, 170271, 251766, 168842, 202211, 125282, 199294, 152973, 155264, 183022, 195276, 65117, 184500, 201558, 154156, 152414, 166859, 174613, 202226, 144305, 201319, 134110, 163495, 79174, 158733, 149867, 138597, 138926, 100364, 197226, 156722, 190627, 155140, 108719, 148712, 141280, 159195, 171444, 137938, 203369, 141375, 214706, 197980, 177294, 152766, 142680, 251284, 252222, 57109, 70159, 177410, 197302, 231840, 199078, 172269, 185920, 146199, 161364, 253162, 94803, 165299, 154585, 153873, 68421, 182549, 134124, 159960, 140213, 129088, 202501, 142580, 159666, 228164, 198621, 197190, 141595, 157821, 159313, 171863, 230448, 216276, 157373, 179834, 156974, 202090, 171109, 172238, 198993, 203218, 141902, 109270, 70491, 167523, 142143, 144000, 201362, 53912, 230427, 201419, 204405, 168544, 199062, 113049, 52983, 175808, 122319, 186222, 158756, 150745, 196150, 254566, 171998, 144712, 159384, 190890, 55131, 143231, 126095, 81771, 135306, 133965, 147663, 189017, 205008, 159245, 192945, 138723, 154172, 244605, 169576, 201288, 170008, 142841, 143461, 197070, 163238, 215960, 201513, 201742, 163683, 167775, 188028, 56742, 219019, 202264, 164669, 219337, 188450, 138016, 167492, 69541, 144241, 253205, 227688, 144264, 142687, 190601, 157948, 198266, 141811, 154279, 150039, 69008, 48585, 148737, 137845, 73669, 3852, 62702, 101285, 197997, 12383, 125766, 138104, 201192, 153622, 157676, 156645, 198761, 147699, 167765, 197074, 192257, 197210, 101787, 61156, 197139, 203327, 219359, 72037, 152063, 100238, 163684, 125263, 151456, 173285, 207563, 152351, 146049, 191254, 101761, 207409, 139236, 205402, 243789, 244064, 162057, 217058, 245811, 167801, 141416, 130639, 246181, 195942, 252979, 251475, 140377, 140278, 227131, 138690, 139108, 93925, 237663, 245077, 238264, 197202, 163350, 191952, 202867, 154632, 157887, 147519, 154646, 168054, 251214, 156668, 39732, 180504, 202088, 174863, 144240, 56837, 146603, 155238, 60881, 144073, 152895, 251294, 198154, 156891, 146693, 156613, 155388, 214410, 180833, 139571, 47502, 197288, 180236, 184258, 133576, 203166, 160840, 202456, 72131, 159077, 144189, 70546, 158076, 154162, 202936, 177115, 245295, 188692, 101962, 140770, 251240, 177188, 154479, 197181, 142067, 252238, 167087, 164302, 206306, 157242, 223598, 57406, 146989, 168931, 78190, 150766, 155431, 186270, 63688, 152781, 175441, 142628, 142504, 99964, 203265, 157053, 63247, 109985, 76770, 138544, 141565, 197124, 154068, 148725, 137942, 90146, 197393, 173613, 199481, 176327, 154889, 201357, 189185, 198133, 197142, 127026, 142054, 250488, 154718, 168409, 55300, 130034, 250490, 112251, 157206, 177481, 177235, 103647, 141713, 158070, 174403, 199219, 135466, 70765, 81600, 138143, 161654, 154714, 155142, 86311, 170030, 92545, 144679, 153945, 161784, 106065, 188091, 174666, 177984, 57293, 198075, 152761, 156574, 151921, 177806, 160044, 140080, 175653, 105432, 182048, 198269, 188875, 171208, 153781, 198164, 198067, 82903, 142550, 138303, 144685, 140657, 252617, 139490, 244717, 199206, 144267, 137934, 252699, 134606, 197320, 154105, 70730, 219671, 53467, 251278, 236868, 253067, 141802, 167529, 144771, 156465, 188805, 155334, 184044, 202234, 154568, 202231, 197179, 188679, 133934, 157983, 214654, 250308, 227764, 143918, 189562, 135319, 149653, 163445, 190622, 131135, 197318, 138805, 142403, 192705, 170639, 140344, 197800, 158511, 72799, 176598, 140088, 251582, 177950, 156902, 153509, 146006, 153865, 198037, 147749, 157132, 254101, 178649, 94885, 176152, 202861, 253837, 56233, 177332, 197198, 245730, 155093, 111440, 199334, 188426, 148503, 176361, 70448, 137809, 153754, 158468, 223289, 162727, 144080, 197160, 53731, 197204, 172131, 170048, 160733, 188456, 108974, 197164, 199150, 197370, 157653, 253116, 201337, 159959, 158353, 45678, 197177, 198921, 140166, 197094, 249999, 176422, 133956, 246628, 197111, 219345, 143692, 176477, 72261, 204075, 70028, 252432, 251884, 242888, 196224, 201898, 154438, 161440, 183089, 157825, 215002, 147884, 199014, 251200, 141618, 178341, 197907, 158529, 158497, 161334, 159955, 158566, 161731, 153913, 152944, 176988, 204476, 154065, 250480, 157042, 144899, 151994, 154467, 23834, 199395, 197690, 157749, 198029, 91415, 171372, 114579, 196070, 153574, 154199, 144367, 215296, 223538, 244639, 46754, 129586, 70804, 185364, 224677, 201316, 156675, 90424, 254274, 141002, 155210, 143367, 58504, 109517, 177779, 174242, 143176, 168475, 152339, 154331, 143275, 177127, 190585, 138519, 168495, 154222, 176247, 173881, 180781, 201504, 152065, 246732, 197166, 189674, 137934, 157479, 162874, 244434, 157178, 141935, 204081, 62597, 175098, 70027, 202321, 158439, 141996, 197312, 142465, 249265, 251273, 157340, 254495, 144648, 201749, 66457, 144116, 163880, 250196, 243816, 230437, 202258, 76732, 78675, 157786, 164498, 55156, 242644, 201367, 109969, 65175, 155286, 176569, 154769, 135353, 176377, 140091, 215852, 155348, 109551, 222557, 148069, 162903, 132857, 198478, 201323, 199815, 197812, 140123, 150072, 254113, 251410, 137557, 158033, 154337, 179911, 149936, 198149, 159924, 238020, 152767, 94302, 188796, 245784, 228240, 190379, 60989, 155383, 172217, 162831, 127102, 144216, 181138, 57269, 62847, 202598, 175417, 199330, 154856, 148331, 153736, 66617, 141635, 143031, 198085, 154265, 163965, 152917, 53085, 179679, 203176, 142318, 154797, 173927, 102886, 163567, 75154, 136271, 71403, 154374, 189231, 236757, 202214, 199240, 197098, 183035, 58908, 198233, 152708, 197415, 199344, 178008, 197194, 207996, 101884, 215837, 23112, 140096, 146905, 155389, 196826, 162725, 251247, 170194, 159380, 197680, 220748, 140281, 139445, 170440, 202349, 159354, 144401, 164501, 154303, 197184, 163693, 158320, 139423, 164530, 251204, 202511, 221430, 60985, 251233, 86105, 139318, 129866, 237149, 133964, 215747, 197994, 135249, 104148, 95427, 245780, 202243, 250956, 141680, 140291, 108551, 137243, 254417, 138642, 143011, 93404, 151587, 251237, 143739, 250411, 167783, 73715, 204740, 173496, 177832, 138810, 201767, 182844, 197329, 170080, 199179, 156577, 177437, 197341, 139634, 219333, 197411, 167678, 154630, 89032, 70781, 154803, 253310, 251279, 68536, 177212, 148480, 75502, 153700, 127732, 251763, 59459, 150161, 103810, 105287, 94862, 157012, 139910, 158049, 197339, 154785, 159657, 82068, 162665, 175405, 153734, 232439, 173772, 71044, 246960, 183790, 154456, 251880, 140642, 148439, 253153, 49253, 103658, 103102, 140018, 110034, 197135, 197956, 65289, 59441, 161563, 246007, 251832, 192293, 243396, 198927, 207104, 228205, 161884, 154497, 66641, 152901, 184089, 159075, 103608, 218209, 202429, 197394, 90641, 174969, 195143, 182517, 168866, 159574, 197809, 197223, 158214, 197192, 107170, 207078, 203465, 134900, 127933, 165399, 202837, 157050, 182892, 131594, 97325, 45458, 184282, 137699, 196926, 191643, 198337, 206138, 251243, 177921, 219237, 252506, 59292, 175503, 171443, 202651, 181351, 203008, 162608, 154959, 143182, 147903, 147049, 199225, 52593, 217343, 191476, 70041, 176009, 137976, 138676, 198268, 142394, 148950, 142198, 175246, 70503, 230432, 198283, 215531, 244805, 94862, 94317, 161849, 94885, 92192, 86703, 158601, 70027, 95427, 90424, 121837, 122421, 252526, 86311, 163790, 87641, 251189, 94302, 101285, 181140, 250182, 164167, 153353, 53467, 92545, 158435, 108235, 81709, 190302}

	// Server URL and Bearer token
	serverURL := "https://sourcegraph.com/.api/graphql"
	bearerToken := "{Add token here}"

	// Iterate over the array and perform the GraphQL mutation for each user
	for index, userID := range userIds {
		formattedUser := fmt.Sprintf("User: %d", userID)
		encodedUser := base64.StdEncoding.EncodeToString([]byte(formattedUser))
		err := performMutation(serverURL, bearerToken, encodedUser)
		if err != nil {
			fmt.Println("Error performing mutation for user:", userID, "Error:", err)
		} else {
			fmt.Println("Mutation successful for user: ", userID, ", index: ", strconv.Itoa(index), "/", strconv.Itoa(len(userIds)))
		}

		// Avoid putting too much load on the server
		time.Sleep(5 * time.Second)
	}
}

// Function to perform the GraphQL mutation
func performMutation(serverURL, token, userID string) error {
	// Prepare the GraphQL request
	reqBody := graphqlRequest{
		Query: `
        mutation DeleteUser($user: ID!) {
            deleteUser(user: $user, hard: true) {
                alwaysNil
            }
        }`,
		Variables: map[string]interface{}{"user": userID},
	}
	requestBody, err := json.Marshal(reqBody)
	if err != nil {
		return err
	}

	// Create an HTTP client and request
	client := &http.Client{}
	req, err := http.NewRequest("POST", serverURL, bytes.NewBuffer(requestBody))
	if err != nil {
		return err
	}

	// Set headers
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "token "+token)

	// Perform the request
	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			fmt.Println("Error closing response body:", err)
		}
	}(resp.Body)

	// Check for non-200 status code
	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("server responded with status code %d", resp.StatusCode)
	}

	return nil
}
