load("//dev:go_defs.bzl", "go_test")
load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")

go_library(
    name = "sg_lib",
    srcs = [
        "analytics.go",
        "checks.go",
        "generates.go",
        "live.go",
        "main.go",
        "os.go",
        "release.go",
        "sg_analytics.go",
        "sg_app.go",
        "sg_audit.go",
        "sg_cloud.go",
        "sg_db.go",
        "sg_deploy.go",
        "sg_doctor.go",
        "sg_embeddings_qa.go",
        "sg_generate.go",
        "sg_help.go",
        "sg_insights.go",
        "sg_install.go",
        "sg_lint.go",
        "sg_live.go",
        "sg_logo.go",
        "sg_migration.go",
        "sg_monitoring.go",
        "sg_ops.go",
        "sg_page.go",
        "sg_rfc.go",
        "sg_run.go",
        "sg_secret.go",
        "sg_setup.go",
        "sg_src.go",
        "sg_start.go",
        "sg_teammate.go",
        "sg_telemetry.go",
        "sg_tests.go",
        "sg_update.go",
        "sg_version.go",
        "sg_wolfi.go",
    ],
    importpath = "github.com/sourcegraph/sourcegraph/dev/sg",
    visibility = ["//visibility:private"],
    deps = [
        "//cmd/embeddings/qa",
        "//dev/sg/buf",
        "//dev/sg/ci",
        "//dev/sg/dependencies",
        "//dev/sg/internal/analytics",
        "//dev/sg/internal/background",
        "//dev/sg/internal/bk",
        "//dev/sg/internal/category",
        "//dev/sg/internal/check",
        "//dev/sg/internal/db",
        "//dev/sg/internal/generate",
        "//dev/sg/internal/generate/golang",
        "//dev/sg/internal/generate/proto",
        "//dev/sg/internal/images",
        "//dev/sg/internal/migration",
        "//dev/sg/internal/open",
        "//dev/sg/internal/repo",
        "//dev/sg/internal/rfc",
        "//dev/sg/internal/run",
        "//dev/sg/internal/secrets",
        "//dev/sg/internal/sgconf",
        "//dev/sg/internal/slack",
        "//dev/sg/internal/std",
        "//dev/sg/internal/usershell",
        "//dev/sg/internal/wolfi",
        "//dev/sg/interrupt",
        "//dev/sg/linters",
        "//dev/sg/msp",
        "//dev/sg/root",
        "//dev/team",
        "//internal/database",
        "//internal/database/basestore",
        "//internal/database/connections/live",
        "//internal/database/dbconn",
        "//internal/database/dbtest",
        "//internal/database/migration/cliutil",
        "//internal/database/migration/runner",
        "//internal/database/migration/schemas",
        "//internal/database/migration/store",
        "//internal/database/postgresdsn",
        "//internal/download",
        "//internal/encryption",
        "//internal/extsvc",
        "//internal/lazyregexp",
        "//internal/observation",
        "//internal/types",
        "//vendor/cloud.google.com/go/storage",
        "//vendor/github.com/Masterminds/semver",
        "//vendor/github.com/buildkite/go-buildkite/v3/buildkite",
        "//vendor/github.com/gomodule/redigo/redis",
        "//vendor/github.com/google/go-github/v55/github",
        "//vendor/github.com/grafana/regexp",
        "//vendor/github.com/jackc/pgx/v4:pgx",
        "//vendor/github.com/keegancsmith/sqlf",
        "//vendor/github.com/opsgenie/opsgenie-go-sdk-v2/alert",
        "//vendor/github.com/opsgenie/opsgenie-go-sdk-v2/client",
        "//vendor/github.com/slack-go/slack",
        "//vendor/github.com/sourcegraph/conc/pool",
        "//vendor/github.com/sourcegraph/log",
        "//vendor/github.com/sourcegraph/run",
        "//vendor/github.com/sourcegraph/sourcegraph/lib/cliutil/completions",
        "//vendor/github.com/sourcegraph/sourcegraph/lib/cliutil/docgen",
        "//vendor/github.com/sourcegraph/sourcegraph/lib/cliutil/exit",
        "//vendor/github.com/sourcegraph/sourcegraph/lib/errors",
        "//vendor/github.com/sourcegraph/sourcegraph/lib/output",
        "//vendor/github.com/sourcegraph/sourcegraph/monitoring/command",
        "//vendor/github.com/sourcegraph/sourcegraph/monitoring/definitions",
        "//vendor/github.com/sourcegraph/sourcegraph/monitoring/monitoring",
        "//vendor/github.com/urfave/cli/v2:cli",
        "//vendor/go.opentelemetry.io/otel/attribute",
        "//vendor/go.opentelemetry.io/otel/trace",
        "//vendor/golang.org/x/mod/semver",
        "//vendor/golang.org/x/oauth2",
        "//vendor/golang.org/x/text/cases",
        "//vendor/golang.org/x/text/language",
        "//vendor/gopkg.in/yaml.v3:yaml_v3",
    ],
)

go_binary(
    name = "sg",
    embed = [":sg_lib"],
    # keep
    gotags = select({
        "//:sg_msp_flag": ["msp"],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
    x_defs = {
        "github.com/sourcegraph/sourcegraph/internal/version.version": "{STABLE_VERSION}",
        "github.com/sourcegraph/sourcegraph/internal/version.timestamp": "{VERSION_TIMESTAMP}",
    },
)

go_test(
    name = "sg_test",
    timeout = "short",
    srcs = [
        "main_test.go",
        "release_test.go",
        "sg_start_test.go",
    ],
    # Required by func findRoot() to check if sg is running in sourcegraph/sourcegraph
    data = ["//:go.mod"],
    embed = [":sg_lib"],
    # HOME is required to be set to start sg
    env = {"HOME": "/tmp"},
    deps = [
        "//dev/sg/internal/run",
        "//dev/sg/internal/sgconf",
        "//dev/sg/internal/std",
        "//vendor/github.com/google/go-cmp/cmp",
        "//vendor/github.com/hexops/autogold/v2:autogold",
        "//vendor/github.com/sourcegraph/sourcegraph/lib/output/outputtest",
        "//vendor/github.com/stretchr/testify/assert",
        "//vendor/github.com/urfave/cli/v2:cli",
    ],
)
